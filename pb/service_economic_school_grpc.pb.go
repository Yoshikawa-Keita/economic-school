// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service_economic_school.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EconomicSchool_CreateUser_FullMethodName  = "/pb.EconomicSchool/CreateUser"
	EconomicSchool_UpdateUser_FullMethodName  = "/pb.EconomicSchool/UpdateUser"
	EconomicSchool_LoginUser_FullMethodName   = "/pb.EconomicSchool/LoginUser"
	EconomicSchool_VerifyEmail_FullMethodName = "/pb.EconomicSchool/VerifyEmail"
	EconomicSchool_CreateExam_FullMethodName  = "/pb.EconomicSchool/CreateExam"
	EconomicSchool_GetExam_FullMethodName     = "/pb.EconomicSchool/GetExam"
	EconomicSchool_ListExams_FullMethodName   = "/pb.EconomicSchool/ListExams"
	EconomicSchool_UpdateExam_FullMethodName  = "/pb.EconomicSchool/UpdateExam"
	EconomicSchool_DeleteExam_FullMethodName  = "/pb.EconomicSchool/DeleteExam"
)

// EconomicSchoolClient is the client API for EconomicSchool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EconomicSchoolClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*Exam, error)
	GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*Exam, error)
	ListExams(ctx context.Context, in *ListExamsRequest, opts ...grpc.CallOption) (*ListExamsResponse, error)
	UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*Exam, error)
	DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type economicSchoolClient struct {
	cc grpc.ClientConnInterface
}

func NewEconomicSchoolClient(cc grpc.ClientConnInterface) EconomicSchoolClient {
	return &economicSchoolClient{cc}
}

func (c *economicSchoolClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, EconomicSchool_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, EconomicSchool_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, EconomicSchool_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, EconomicSchool_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*Exam, error) {
	out := new(Exam)
	err := c.cc.Invoke(ctx, EconomicSchool_CreateExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*Exam, error) {
	out := new(Exam)
	err := c.cc.Invoke(ctx, EconomicSchool_GetExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) ListExams(ctx context.Context, in *ListExamsRequest, opts ...grpc.CallOption) (*ListExamsResponse, error) {
	out := new(ListExamsResponse)
	err := c.cc.Invoke(ctx, EconomicSchool_ListExams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*Exam, error) {
	out := new(Exam)
	err := c.cc.Invoke(ctx, EconomicSchool_UpdateExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *economicSchoolClient) DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EconomicSchool_DeleteExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EconomicSchoolServer is the server API for EconomicSchool service.
// All implementations must embed UnimplementedEconomicSchoolServer
// for forward compatibility
type EconomicSchoolServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	CreateExam(context.Context, *CreateExamRequest) (*Exam, error)
	GetExam(context.Context, *GetExamRequest) (*Exam, error)
	ListExams(context.Context, *ListExamsRequest) (*ListExamsResponse, error)
	UpdateExam(context.Context, *UpdateExamRequest) (*Exam, error)
	DeleteExam(context.Context, *DeleteExamRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEconomicSchoolServer()
}

// UnimplementedEconomicSchoolServer must be embedded to have forward compatible implementations.
type UnimplementedEconomicSchoolServer struct {
}

func (UnimplementedEconomicSchoolServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedEconomicSchoolServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedEconomicSchoolServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedEconomicSchoolServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedEconomicSchoolServer) CreateExam(context.Context, *CreateExamRequest) (*Exam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedEconomicSchoolServer) GetExam(context.Context, *GetExamRequest) (*Exam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}
func (UnimplementedEconomicSchoolServer) ListExams(context.Context, *ListExamsRequest) (*ListExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExams not implemented")
}
func (UnimplementedEconomicSchoolServer) UpdateExam(context.Context, *UpdateExamRequest) (*Exam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExam not implemented")
}
func (UnimplementedEconomicSchoolServer) DeleteExam(context.Context, *DeleteExamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExam not implemented")
}
func (UnimplementedEconomicSchoolServer) mustEmbedUnimplementedEconomicSchoolServer() {}

// UnsafeEconomicSchoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EconomicSchoolServer will
// result in compilation errors.
type UnsafeEconomicSchoolServer interface {
	mustEmbedUnimplementedEconomicSchoolServer()
}

func RegisterEconomicSchoolServer(s grpc.ServiceRegistrar, srv EconomicSchoolServer) {
	s.RegisterService(&EconomicSchool_ServiceDesc, srv)
}

func _EconomicSchool_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_CreateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_GetExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).GetExam(ctx, req.(*GetExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_ListExams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).ListExams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_ListExams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).ListExams(ctx, req.(*ListExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_UpdateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).UpdateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_UpdateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).UpdateExam(ctx, req.(*UpdateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EconomicSchool_DeleteExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EconomicSchoolServer).DeleteExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EconomicSchool_DeleteExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EconomicSchoolServer).DeleteExam(ctx, req.(*DeleteExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EconomicSchool_ServiceDesc is the grpc.ServiceDesc for EconomicSchool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EconomicSchool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EconomicSchool",
	HandlerType: (*EconomicSchoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _EconomicSchool_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _EconomicSchool_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _EconomicSchool_LoginUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _EconomicSchool_VerifyEmail_Handler,
		},
		{
			MethodName: "CreateExam",
			Handler:    _EconomicSchool_CreateExam_Handler,
		},
		{
			MethodName: "GetExam",
			Handler:    _EconomicSchool_GetExam_Handler,
		},
		{
			MethodName: "ListExams",
			Handler:    _EconomicSchool_ListExams_Handler,
		},
		{
			MethodName: "UpdateExam",
			Handler:    _EconomicSchool_UpdateExam_Handler,
		},
		{
			MethodName: "DeleteExam",
			Handler:    _EconomicSchool_DeleteExam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_economic_school.proto",
}
