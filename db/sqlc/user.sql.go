// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email,
    user_type,
    profile_image_url,
    version
) VALUES (
             $1, $2, $3, $4, $5, $6, 0
         ) RETURNING username, hashed_password, full_name, email, user_type, profile_image_url, is_email_verified, password_changed_at, created_at, version
`

type CreateUserParams struct {
	Username        string `json:"username"`
	HashedPassword  string `json:"hashed_password"`
	FullName        string `json:"full_name"`
	Email           string `json:"email"`
	UserType        int32  `json:"user_type"`
	ProfileImageUrl string `json:"profile_image_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.UserType,
		arg.ProfileImageUrl,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.UserType,
		&i.ProfileImageUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, user_type, profile_image_url, is_email_verified, password_changed_at, created_at, version FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.UserType,
		&i.ProfileImageUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    full_name = COALESCE($3, full_name),
    email = COALESCE($4, email),
    user_type = COALESCE($5, user_type),
    profile_image_url = COALESCE($6, profile_image_url),
    is_email_verified = COALESCE($7, is_email_verified),
    version = version + 1
WHERE
        username = $8
    RETURNING username, hashed_password, full_name, email, user_type, profile_image_url, is_email_verified, password_changed_at, created_at, version
`

type UpdateUserParams struct {
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	FullName          sql.NullString `json:"full_name"`
	Email             sql.NullString `json:"email"`
	UserType          sql.NullInt32  `json:"user_type"`
	ProfileImageUrl   sql.NullString `json:"profile_image_url"`
	IsEmailVerified   sql.NullBool   `json:"is_email_verified"`
	Username          string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.UserType,
		arg.ProfileImageUrl,
		arg.IsEmailVerified,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.UserType,
		&i.ProfileImageUrl,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
