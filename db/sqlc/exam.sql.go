// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: exam.sql

package db

import (
	"context"
	"database/sql"
)

const createExam = `-- name: CreateExam :one
INSERT INTO exams (
    university, subject, year, question_num, question_pdf_url, answer_pdf_url, video_url
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         ) RETURNING exam_id, university, subject, year, question_num, question_pdf_url, answer_pdf_url, video_url, created_at
`

type CreateExamParams struct {
	University     string         `json:"university"`
	Subject        string         `json:"subject"`
	Year           int32          `json:"year"`
	QuestionNum    int32          `json:"question_num"`
	QuestionPdfUrl sql.NullString `json:"question_pdf_url"`
	AnswerPdfUrl   sql.NullString `json:"answer_pdf_url"`
	VideoUrl       sql.NullString `json:"video_url"`
}

func (q *Queries) CreateExam(ctx context.Context, arg CreateExamParams) (Exam, error) {
	row := q.db.QueryRowContext(ctx, createExam,
		arg.University,
		arg.Subject,
		arg.Year,
		arg.QuestionNum,
		arg.QuestionPdfUrl,
		arg.AnswerPdfUrl,
		arg.VideoUrl,
	)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.University,
		&i.Subject,
		&i.Year,
		&i.QuestionNum,
		&i.QuestionPdfUrl,
		&i.AnswerPdfUrl,
		&i.VideoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExam = `-- name: DeleteExam :exec
DELETE FROM exams WHERE exam_id = $1
`

func (q *Queries) DeleteExam(ctx context.Context, examID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExam, examID)
	return err
}

const getExam = `-- name: GetExam :one
SELECT exam_id, university, subject, year, question_num, question_pdf_url, answer_pdf_url, video_url, created_at FROM exams WHERE exam_id = $1
`

func (q *Queries) GetExam(ctx context.Context, examID int32) (Exam, error) {
	row := q.db.QueryRowContext(ctx, getExam, examID)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.University,
		&i.Subject,
		&i.Year,
		&i.QuestionNum,
		&i.QuestionPdfUrl,
		&i.AnswerPdfUrl,
		&i.VideoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listExams = `-- name: ListExams :many
SELECT exam_id, university, subject, year, question_num, question_pdf_url, answer_pdf_url, video_url, created_at FROM exams ORDER BY exam_id
`

func (q *Queries) ListExams(ctx context.Context) ([]Exam, error) {
	rows, err := q.db.QueryContext(ctx, listExams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exam{}
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ExamID,
			&i.University,
			&i.Subject,
			&i.Year,
			&i.QuestionNum,
			&i.QuestionPdfUrl,
			&i.AnswerPdfUrl,
			&i.VideoUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExam = `-- name: UpdateExam :one
UPDATE exams SET
                 university = COALESCE($2, university),
                 subject = COALESCE($3, subject),
                 year = COALESCE($4, year),
                 question_num = COALESCE($5, question_num),
                 question_pdf_url = COALESCE($6, question_pdf_url),
                 answer_pdf_url = COALESCE($7, answer_pdf_url),
                 video_url = COALESCE($8, video_url)
WHERE exam_id = $1
    RETURNING exam_id, university, subject, year, question_num, question_pdf_url, answer_pdf_url, video_url, created_at
`

type UpdateExamParams struct {
	ExamID         int32          `json:"exam_id"`
	University     string         `json:"university"`
	Subject        string         `json:"subject"`
	Year           int32          `json:"year"`
	QuestionNum    int32          `json:"question_num"`
	QuestionPdfUrl sql.NullString `json:"question_pdf_url"`
	AnswerPdfUrl   sql.NullString `json:"answer_pdf_url"`
	VideoUrl       sql.NullString `json:"video_url"`
}

func (q *Queries) UpdateExam(ctx context.Context, arg UpdateExamParams) (Exam, error) {
	row := q.db.QueryRowContext(ctx, updateExam,
		arg.ExamID,
		arg.University,
		arg.Subject,
		arg.Year,
		arg.QuestionNum,
		arg.QuestionPdfUrl,
		arg.AnswerPdfUrl,
		arg.VideoUrl,
	)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.University,
		&i.Subject,
		&i.Year,
		&i.QuestionNum,
		&i.QuestionPdfUrl,
		&i.AnswerPdfUrl,
		&i.VideoUrl,
		&i.CreatedAt,
	)
	return i, err
}
