// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: password_reset_email.sql

package db

import (
	"context"
)

const createPasswordResetEmail = `-- name: CreatePasswordResetEmail :one
INSERT INTO password_reset_emails (
    username,
    email,
    secret_code
) VALUES (
             $1, $2, $3
         ) RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreatePasswordResetEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreatePasswordResetEmail(ctx context.Context, arg CreatePasswordResetEmailParams) (PasswordResetEmail, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetEmail, arg.Username, arg.Email, arg.SecretCode)
	var i PasswordResetEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updatePasswordResetEmail = `-- name: UpdatePasswordResetEmail :one
UPDATE password_reset_emails
SET
    is_used = TRUE
WHERE
        id = $1
  AND secret_code = $2
  AND is_used = FALSE
  AND expired_at > now()
    RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdatePasswordResetEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdatePasswordResetEmail(ctx context.Context, arg UpdatePasswordResetEmailParams) (PasswordResetEmail, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordResetEmail, arg.ID, arg.SecretCode)
	var i PasswordResetEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
