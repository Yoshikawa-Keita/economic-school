// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: ranking.sql

package db

import (
	"context"
)

const getGlobalRanking = `-- name: GetGlobalRanking :many
SELECT username, num_completed_exams, ranking, ranking_date, created_at FROM global_ranking
ORDER BY ranking
`

func (q *Queries) GetGlobalRanking(ctx context.Context) ([]GlobalRanking, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalRanking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GlobalRanking{}
	for rows.Next() {
		var i GlobalRanking
		if err := rows.Scan(
			&i.Username,
			&i.NumCompletedExams,
			&i.Ranking,
			&i.RankingDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniversityRanking = `-- name: GetUniversityRanking :many
SELECT username, university, num_completed_exams, ranking, ranking_date, created_at FROM university_ranking
ORDER BY university, ranking
`

func (q *Queries) GetUniversityRanking(ctx context.Context) ([]UniversityRanking, error) {
	rows, err := q.db.QueryContext(ctx, getUniversityRanking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UniversityRanking{}
	for rows.Next() {
		var i UniversityRanking
		if err := rows.Scan(
			&i.Username,
			&i.University,
			&i.NumCompletedExams,
			&i.Ranking,
			&i.RankingDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyGlobalRanking = `-- name: GetWeeklyGlobalRanking :many
SELECT username, completed_exams_count, ranking, ranking_date, created_at FROM weekly_global_ranking
ORDER BY ranking
`

func (q *Queries) GetWeeklyGlobalRanking(ctx context.Context) ([]WeeklyGlobalRanking, error) {
	rows, err := q.db.QueryContext(ctx, getWeeklyGlobalRanking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklyGlobalRanking{}
	for rows.Next() {
		var i WeeklyGlobalRanking
		if err := rows.Scan(
			&i.Username,
			&i.CompletedExamsCount,
			&i.Ranking,
			&i.RankingDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeeklyUniversityRanking = `-- name: GetWeeklyUniversityRanking :many
SELECT username, university, completed_exams_count, ranking, ranking_date, created_at FROM weekly_university_ranking
ORDER BY university, ranking
`

func (q *Queries) GetWeeklyUniversityRanking(ctx context.Context) ([]WeeklyUniversityRanking, error) {
	rows, err := q.db.QueryContext(ctx, getWeeklyUniversityRanking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeeklyUniversityRanking{}
	for rows.Next() {
		var i WeeklyUniversityRanking
		if err := rows.Scan(
			&i.Username,
			&i.University,
			&i.CompletedExamsCount,
			&i.Ranking,
			&i.RankingDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
